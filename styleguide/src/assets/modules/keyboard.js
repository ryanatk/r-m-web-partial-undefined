/**
 * Parses keyboard events with the intention to trap the focus in the given
 * element
 * @module modules/keyboard
 */

import $ from 'jquery';

const keyCodes = {
  9: 'TAB',
  13: 'ENTER',
  27: 'ESCAPE',
  32: 'SPACE',
  37: 'ARROWLEFT',
  38: 'ARROWUP',
  39: 'ARROWRIGHT',
  40: 'ARROWDOWN',
};
/*
 * Constants for easier comparing.
 * Can be used like Keyboard.parseKey(event) === Keyboard.keys.SPACE
 */
const getKeyCodes = (kcs) => {
  const k = {};
  Object.keys(kcs).forEach((key) => {
    k[kcs[key]] = kcs[key];
  });
  return k;
};

const Keyboard = {
  keys: getKeyCodes(keyCodes),
  /**
   * Parses the (keyboard) event and returns a String that represents its key
   * Can be used like Keyboard.parseKey(event) === Keyboard.keys.SPACE
   * @param {Event} event - the event generated by the event handler
   * @return String key - String that represents the key pressed
   */
  parseKey(event) {
    let key;
    if (event.key !== undefined) {
      if (event.key === ' ') {
        key = 'SPACE';
      } else {
        key = event.key.toUpperCase();
      }
    } else {
      key = keyCodes[event.which
        || event.keyCode]
        || String.fromCharCode(event.which).toUpperCase();
    }

    // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
    key = key.replace(/\W+/, '');

    if (event.shiftKey) key = `SHIFT_${key}`;
    if (event.ctrlKey) key = `CTRL_${key}`;
    if (event.altKey) key = `ALT_${key}`;

    // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
    key = key.replace(/_$/, '');

    return key;
  },
  /**
   * Finds all focusable elements within the given `$element`
   * @param {jQuery} $el - jQuery object to search within
   * @return {jQuery} $focusable - all focusable elements within `$el`
   */
  findFocusable($el) {
    return $el.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]')
    .filter(function filterFocusable() {
      if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) { return false; } // only have visible elements and those that have a tabindex greater or equal 0
      return true;
    });
  },
  /**
   * Traps the focus in the given element.
   * @param  {jQuery} $el - jQuery object to trap the foucs into.
   */
  trapFocus($el) {
    const $focusable = Keyboard.findFocusable($el);
    const $firstFocusable = $focusable.eq(0);
    const $lastFocusable = $focusable.eq(-1);
    $el.on('keydown.trapfocus', (event) => {
      if (event.target === $lastFocusable[0] && Keyboard.parseKey(event) === 'TAB') {
        event.preventDefault();
        $firstFocusable.focus();
      } else if (event.target === $firstFocusable[0] && Keyboard.parseKey(event) === 'SHIFT_TAB') {
        event.preventDefault();
        $lastFocusable.focus();
      }
    });
  },
  /**
   * Releases the trapped focus from the given element.
   * @param  {jQuery} $el  jQuery object to release the focus for.
   * @param  {jQuery} $lastFocus return to last focus
   */
  releaseFocus($el, $lastFocus) {
    $el.off('keydown.trapfocus');
    if ($lastFocus) {
      $lastFocus.focus();
    }
  },
};

export default Keyboard;
