@import '../lib/lib';

/**

  @grids
---------------------------------------------------------
  layout/_grids.scss
--------------------------------------------------------

  Skyline uses a simple grid system.  It starts with
  a wrapper div that can have a classname of .grid
  or .g for short.  Inside of that div, you'll nest
  your grid units.  These are divs with classname of
  either .grid__col or .gc for short.

  To specify the responsive behavior of the grid,
  add width classes from layout/_widths.scss.

  Example: Grid with responsive width classes
  <div class="grid">
    <div class="grid__col sm-one-whole md-one-half  lg-one-third    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-half  md-one-half  lg-one-third    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-half  md-one-third lg-one-third    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-whole md-one-third lg-one-fifth    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-half  md-one-third lg-three-fifths xl-one-twelfth">...</div>
    <div class="grid__col sm-one-half  md-one-half  lg-one-fifth    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-whole md-one-half  lg-one-sixth    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-half  md-one-third lg-one-sixth    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-half  md-one-third lg-one-sixth    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-whole md-one-third lg-one-sixth    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-half  md-one-half  lg-one-sixth    xl-one-twelfth">...</div>
    <div class="grid__col sm-one-half  md-one-half  lg-one-sixth    xl-one-twelfth">...</div>
  </div>

  For a grid wrap containing equally-sized grid units, like
  a gallery of thumbnails for instance, use the responsive ups
  classes from layout/_widths.scss. With these classes
  applied to the .grid-wrap/.gw, you won't need to specify
  widths on the individual grid units, just on the wrapper.

  Example: Grid with responsive ups classes using short grid syntax
  <div class="g two-up sm-three-up md-four-up lg-six-up">
    <div class="gc">...</div>
    <div class="gc">...</div>
    <div class="gc">...</div>`
    <div class="gc">...</div>
    <div class="gc">...</div>
    <div class="gc">...</div>
    <div class="gc">...</div>
    <div class="gc">...</div>
    <div class="gc">...</div>
    <div class="gc">...</div>
    <div class="gc">...</div>
    <div class="gc">...</div>
  </div>

  NOTE: see some test styles at the bottom of this partial
  Remove them if you don't need them.

------------------------------------------------------ */





// Grid configuration
// -----------------------------------------------------
//
// Define the point at which grids no longer stack, but float
// You might use a $breakpoint__* variable from _vars.scss or
// any other value that works for you.
$grid__float-at: $base;
//
// Define the width of the gutters between grid units
// You might use $base-unit from _vars.scss, or a relative value
// of $base-unit, like .5 * $base-unit for instance for small gutters.
$grid__gutter-width: $base-unit;
//
// Define the amount of space at the bottom of a grid unit
// when they are stacking (before they start to float)
// You might choose $base-unit again.
$grid__bottom-spacing-when-stacking: $base-unit;
//
// Define the amount of space at the bottom of a grid unit
// when they are floating. It's often a good idea to make
// this value equal to the gutter width.
$grid__bottom-spacing-when-floating: $grid__gutter-width;



// Grid Wrap
%g {
  @extend %u-clearfix;
  display: block;
  margin-bottom: rem(-1*$grid__bottom-spacing-when-stacking);
  // Sometimes, ul are used for grid wraps
  list-style-type: none;
  // @include bp-at-least($grid__float-at) {
  //   margin: 0 0 rem(-1*$grid__bottom-spacing-when-floating) rem(-1*$grid__gutter-width);
  // }
  @include bp-at-least($grid__float-at) {
    margin: 0 0 0 rem(-1*$grid__gutter-width);
  }
  // Negative margin fix for IE
  @include old-ie {
    // position: relative;
    // bottom: rem(-1*$grid__bottom-spacing-when-floating);
    // left: rem(-1*$grid__gutter-width);
    // zoom: 1;
  }
  &--collapse {
    margin-left: 0;
    .grid__col,
    .gc {
      padding-right: 0;
      padding-left: 0;
    }
  }
  &--collapse-bottom {
    .grid__col,
    .gc {
      padding-bottom: 0;
    }
  }
  &--collapse-all {
    margin-left: 0;
    .grid__col,
    .gc {
      padding: 0;
    }
  }
}


// Grid
%gc {
  display: block;
  position: relative;
  width: 100%;
  min-height: rem(1);
  padding-bottom: rem($grid__bottom-spacing-when-stacking);
  @include bp-at-least($grid__float-at) {
    padding: 0 0 rem($grid__bottom-spacing-when-floating) rem($grid__gutter-width);
    float: left;
  }
  // Negative margin fix for IE
  @include old-ie {
    // position: relative;
    // bottom: rem(-1*$grid__bottom-spacing-when-floating);
    // left: rem(-1*$grid__gutter-width);
    // zoom: 1;
  }
}
